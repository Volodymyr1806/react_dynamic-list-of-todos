{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["getUser","userId","fetch","then","response","json","TodoList","state","todos","query","selectValue","buttonSelected","changeTodoStatus","todoId","newTodos","map","todo","id","completed","setState","handleSearchInput","event","value","target","handleSelect","currentTarget","selectButton","filterTodosBySearch","filterTodosBySelect","filter","titleLower","title","toLowerCase","queryLower","includes","a","todosFromServer","this","props","selectUser","selectedUserId","filteredTodos","className","type","placeholder","onChange","classNames","htmlFor","checked","onClick","React","PureComponent","CurrentUser","selectedUser","clearInfo","user","prevProps","loadUser","name","email","phone","App","selectUserId","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca579263.chunk.js","sourcesContent":["import { Todo, User } from './react-app-env';\n\nexport const getTodos: () => Promise<Todo[]> = () => {\n  return fetch('https://mate.academy/students-api/todos')\n    .then(response => response.json());\n};\n\nexport const getUser: (userId: number) => Promise<User> = (userId) => {\n  return fetch(`https://mate.academy/students-api/users/${userId}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../../react-app-env';\nimport { getTodos } from '../../api';\n\ntype Props = {\n  selectUser: (userId: number) => void,\n  selectedUserId: number,\n};\n\ntype State = {\n  query: string,\n  selectValue: string,\n  buttonSelected: boolean,\n  todos: Todo[],\n};\n\nexport class TodoList extends React.PureComponent<Props, State> {\n  state: State = {\n    todos: [],\n    query: '',\n    selectValue: '',\n    buttonSelected: false,\n  };\n\n  async componentDidMount() {\n    const todosFromServer = await getTodos();\n\n    this.setState({\n      todos: todosFromServer,\n    });\n  }\n\n  changeTodoStatus = (todoId: number) => {\n    const newTodos = this.state.todos.map(todo => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: newTodos,\n    }));\n  };\n\n  handleSearchInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState(() => ({\n      query: value,\n    }));\n  };\n\n  handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.currentTarget;\n\n    this.setState(() => ({\n      selectValue: value,\n    }));\n  };\n\n  selectButton = () => {\n    this.setState(state => ({\n      buttonSelected: !state.buttonSelected,\n    }));\n  };\n\n  filterTodosBySearch = () => {\n    return this.filterTodosBySelect()\n      .filter(todo => {\n        const titleLower = todo.title.toLowerCase();\n        const queryLower = this.state.query.toLowerCase();\n\n        return titleLower.includes(queryLower);\n      });\n  };\n\n  filterTodosBySelect = () => {\n    switch (this.state.selectValue) {\n      case 'All todos':\n        return this.state.todos;\n      case 'Not completed todos':\n        return this.state.todos.filter(todo => todo.completed === false);\n      case 'Completed todos':\n        return this.state.todos.filter(todo => todo.completed === true);\n      default:\n        return this.state.todos;\n    }\n  };\n\n  render() {\n    const { selectUser, selectedUserId } = this.props;\n    const {\n      query,\n      selectValue,\n    } = this.state;\n\n    const filteredTodos = this.filterTodosBySearch();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={query}\n          onChange={this.handleSearchInput}\n        />\n\n        <select value={selectValue} onChange={this.handleSelect}>\n          <option value=\"All todos\">All todos</option>\n          <option value=\"Not completed todos\">Not completed todos</option>\n          <option value=\"Completed todos\">Completed todos</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label htmlFor={`Todo-${todo.id}`}>\n                  <input\n                    type=\"checkbox\"\n                    id={`Todo-${todo.id}`}\n                    checked={todo.completed}\n                    onChange={() => {\n                      this.changeTodoStatus(todo.id);\n                    }}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected': selectedUserId === todo.userId,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                    this.selectButton();\n                  }}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../react-app-env';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number,\n  selectUser: (userId: number) => void,\n};\n\ntype State = {\n  selectedUser: User | null,\n};\n\nexport class CurrentUser extends React.PureComponent<Props, State> {\n  state: State = {\n    selectedUser: null,\n  };\n\n  async componentDidMount() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({\n      selectedUser: user,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  clearInfo = () => {\n    this.setState(() => ({\n      selectedUser: null,\n    }));\n\n    this.props.selectUser(0);\n  };\n\n  async loadUser() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ selectedUser: user });\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {selectedUser && (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser.id}`}</span></h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button is-info\"\n              onClick={this.clearInfo}\n            >\n              Clear\n            </button>\n          </>\n        )}\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './react-app-env.d';\n\ntype State = {\n  selectedUserId: number,\n  todos: Todo[],\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  selectUserId = (userId: number) => {\n    this.setState(state => ({\n      ...state,\n      selectedUserId: userId,\n    }));\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectUser={this.selectUserId}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser selectedUserId={selectedUserId} selectUser={this.selectUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}